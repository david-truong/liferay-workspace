##
## Rules
##
## This sample program will return personalized content based on the user's
## addresses set in the My Account section of the Control Panel.
##
## For example, suppose the current user has an address in the United States and
## is a member of the Liferay community. All assets within the Liferay community
## that are tagged with "americas" will be returned.
##

package com.liferay.sampledrools.dependencies;

import com.liferay.portal.kernel.search.BooleanClause;
import com.liferay.portal.kernel.search.BooleanClauseOccur;
import com.liferay.portal.kernel.search.BooleanClauseFactoryUtil;
import com.liferay.portal.kernel.search.BooleanQuery;
import com.liferay.portal.kernel.search.BooleanQueryFactoryUtil;
import com.liferay.portal.kernel.search.Document;
import com.liferay.portal.kernel.search.FacetedSearcher;
import com.liferay.portal.kernel.search.Field;
import com.liferay.portal.kernel.search.Hits;
import com.liferay.portal.kernel.search.Indexer;
import com.liferay.portal.kernel.search.SearchContext;
import com.liferay.portal.kernel.search.facet.AssetEntriesFacet;
import com.liferay.portal.kernel.search.facet.Facet;
import com.liferay.portal.kernel.search.facet.ScopeFacet;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.KeyValuePair;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.Address;
import com.liferay.portal.model.Group;
import com.liferay.portal.model.Contact;
import com.liferay.portal.model.User;
import com.liferay.portal.service.AddressLocalServiceUtil;
import com.liferay.portal.util.PortalUtil;
import com.liferay.portlet.asset.model.AssetEntry;
import com.liferay.portlet.asset.service.AssetEntryLocalServiceUtil;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

dialect "java"

function List getAssetEntries(
	User user, long[] classNameIds, String assetTagName) {

	List<Group> groups = user.getMySites();

	long[] groupIds = new long[groups.size()];

	for (int i = 0; i < groups.size(); i++) {
		Group group = groups.get(i);

		groupIds[i] = group.getGroupId();
	}

	if ((classNameIds == null) || (classNameIds.length == 0) ||
		(groupIds.length == 0) || Validator.isNull(assetTagName)) {

		return Collections.emptyList();
	}

	SearchContext searchContext = new SearchContext();

	Facet assetEntriesFacet = new AssetEntriesFacet(searchContext);

	assetEntriesFacet.setStatic(true);

	searchContext.addFacet(assetEntriesFacet);

	Facet scopeFacet = new ScopeFacet(searchContext);

	scopeFacet.setStatic(true);

	searchContext.addFacet(scopeFacet);

	searchContext.setAttribute("paginationType", "regular");
	searchContext.setCompanyId(user.getCompanyId());
	searchContext.setGroupIds(groupIds);
	searchContext.setIncludeStagingGroups(false);
	searchContext.setScopeStrict(false);
	searchContext.setUserId(user.getUserId());

	BooleanQuery booleanQuery = BooleanQueryFactoryUtil.create(searchContext);

	booleanQuery.addExactTerm(Field.ASSET_TAG_NAMES, assetTagName);

	BooleanClause booleanClause = BooleanClauseFactoryUtil.create(
		searchContext, booleanQuery, BooleanClauseOccur.MUST.getName());

	searchContext.setBooleanClauses(new BooleanClause[] {booleanClause});

	List<AssetEntry> assetEntries = new ArrayList<AssetEntry>();

	Indexer indexer = FacetedSearcher.getInstance();

	Hits hits = indexer.search(searchContext);

	for (int i = 0; i < hits.getDocs().length; i++) {
		Document document = hits.doc(i);

		String entryClassName = document.get(Field.ENTRY_CLASS_NAME);

		long entryClassPK = GetterUtil.getLong(
			document.get(Field.ENTRY_CLASS_PK));
		long rootEntryClassPK = GetterUtil.getLong(
			document.get(Field.ROOT_ENTRY_CLASS_PK));

		if (rootEntryClassPK > 0) {
			entryClassPK = rootEntryClassPK;
		}

		AssetEntry assetEntry = AssetEntryLocalServiceUtil.fetchEntry(
			entryClassName, entryClassPK);

		if (assetEntry != null) {
			assetEntries.add(assetEntry);
		}
	}

	return assetEntries;
}

rule "Initialize Rules"
	salience 1000
	when
		user : User();
	then
		List<Address> userAddresses = AddressLocalServiceUtil.getAddresses(
			user.getCompanyId(), Contact.class.getName(), user.getContactId());

		for (Address userAddress : userAddresses) {
			insertLogical(userAddress);
		}
end

rule "Get Americas Content"
	when
		classNameIds : KeyValuePair(key == "classNameIds");
		results : List();
		user : User();
		userAddress : Address(
			country.getName(LocaleUtil.US) in ("Brazil", "Canada", "Mexico", "United States"));
	then
		List assetEntries = getAssetEntries(
			user, StringUtil.split(classNameIds.getValue(), 0L), "americas");

		assetEntries.removeAll(results);

		modify(results) {
			addAll(assetEntries);
		};

		retract(userAddress);
end

rule "Get European Content"
	when
		classNameIds : KeyValuePair(key == "classNameIds");
		results : List();
		user : User();
		userAddress : Address(country.getName(LocaleUtil.US) in ("France", "Germany", "Spain"));
	then
		List assetEntries = getAssetEntries(
			user, StringUtil.split(classNameIds.getValue(), 0L), "european");

		assetEntries.removeAll(results);

		modify(results) {
			addAll(assetEntries);
		};

		retract(userAddress);
end

rule "Get Indian Content"
	when
		classNameIds : KeyValuePair(key == "classNameIds");
		results : List();
		user : User();
		userAddress : Address(
			country.getName(LocaleUtil.US) in ("India", "Malaysia", "Singapore"));
	then
		List assetEntries = getAssetEntries(
			user, StringUtil.split(classNameIds.getValue(), 0L), "indian");

		assetEntries.removeAll(results);

		modify(results) {
			addAll(assetEntries);
		};

		retract(userAddress);
end