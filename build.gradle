import com.liferay.gradle.plugins.gulp.ExecuteGulpTask
import com.liferay.gradle.util.FileUtil

import groovy.json.JsonBuilder

buildscript {
	dependencies {
		classpath group: "com.liferay", name: "com.liferay.gradle.plugins", version: "1.0.47+"
		classpath group: "com.liferay", name: "com.liferay.gradle.plugins.gulp", version: "1.0.0+"
	}

	repositories {
		mavenLocal()

		maven {
			url "http://cdn.repository.liferay.com/nexus/content/groups/public"
		}
	}
}

configurations {
	bundle
}

dependencies {
	bundle group: "com.liferay", name: "portal-tomcat-bundle", version: "7.0-ce-a5-20151209121227541"
}

repositories {
	maven {
		url "http://106.187.96.36/gamerson/liferay-workspace-repo/"
	}
}

configure(subprojects.findAll {!it.subprojects && FileUtil.isChild(it.projectDir, gradle.modulesDir)}) {
	repositories {
		maven {
			url "http://cdn.repository.liferay.com/nexus/content/groups/public"
		}
	}

	apply plugin: "com.liferay.plugin"

	liferay {
		appServerParentDir = gradle.appServerParentDir
	}
}

configure(subprojects.findAll {!it.subprojects && FileUtil.isChild(it.projectDir, gradle.themesDir)}) {
	apply plugin: "base"
	apply plugin: "com.liferay.gulp"

	task createLiferayThemeJson
	task deploy(dependsOn: "gulpDeploy")

	buildDir = file("build_gradle")

	assemble {
		dependsOn "gulpBuild"
	}

	clean {
		delete "build", "dist"
		dependsOn cleanNpmInstall
	}

	createLiferayThemeJson {
		File liferayThemeJsonFile = file("liferay-theme.json")

		doLast {
			JsonBuilder jsonBuilder = new JsonBuilder()

			File appServerDir = new File(gradle.appServerParentDir, "tomcat-7.0.62")
			File appServerThemeDir = new File(appServerDir, "webapps/" + project.name)
			File deployDir = new File(gradle.appServerParentDir, "deploy")

			jsonBuilder.LiferayTheme {
				appServerPath appServerDir.absolutePath
				appServerPathTheme appServerThemeDir.absolutePath
				deployed false
				deployPath deployDir.absolutePath
				themeName project.name
			}

			liferayThemeJsonFile.text = jsonBuilder
		}

		onlyIf {
			!liferayThemeJsonFile.exists()
		}
	}

	tasks.withType(ExecuteGulpTask) {
		dependsOn createLiferayThemeJson, npmInstall
	}
}

Project pluginsSDKProject = findProject(":plugins-sdk")

if (pluginsSDKProject) {
	configure(pluginsSDKProject) {
		ant.importBuild "build.xml"

		task build(type: Copy, dependsOn: "war")

		build {
			from "dist"
			into "build/distributions"
		}
	}
}
