/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.roster.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.ContactPersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import com.liferay.roster.model.RosterMember;
import com.liferay.roster.service.RosterMemberLocalService;
import com.liferay.roster.service.persistence.ClubPersistence;
import com.liferay.roster.service.persistence.RosterMemberPersistence;
import com.liferay.roster.service.persistence.RosterPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the roster member local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.roster.service.impl.RosterMemberLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.roster.service.impl.RosterMemberLocalServiceImpl
 * @see com.liferay.roster.service.RosterMemberLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class RosterMemberLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements RosterMemberLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.roster.service.RosterMemberLocalServiceUtil} to access the roster member local service.
	 */

	/**
	 * Adds the roster member to the database. Also notifies the appropriate model listeners.
	 *
	 * @param rosterMember the roster member
	 * @return the roster member that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public RosterMember addRosterMember(RosterMember rosterMember) {
		rosterMember.setNew(true);

		return rosterMemberPersistence.update(rosterMember);
	}

	/**
	 * Creates a new roster member with the primary key. Does not add the roster member to the database.
	 *
	 * @param rosterMemberId the primary key for the new roster member
	 * @return the new roster member
	 */
	@Override
	public RosterMember createRosterMember(long rosterMemberId) {
		return rosterMemberPersistence.create(rosterMemberId);
	}

	/**
	 * Deletes the roster member with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param rosterMemberId the primary key of the roster member
	 * @return the roster member that was removed
	 * @throws PortalException if a roster member with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public RosterMember deleteRosterMember(long rosterMemberId)
		throws PortalException {
		return rosterMemberPersistence.remove(rosterMemberId);
	}

	/**
	 * Deletes the roster member from the database. Also notifies the appropriate model listeners.
	 *
	 * @param rosterMember the roster member
	 * @return the roster member that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public RosterMember deleteRosterMember(RosterMember rosterMember) {
		return rosterMemberPersistence.remove(rosterMember);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(RosterMember.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return rosterMemberPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.roster.model.impl.RosterMemberModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return rosterMemberPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.roster.model.impl.RosterMemberModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return rosterMemberPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return rosterMemberPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return rosterMemberPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public RosterMember fetchRosterMember(long rosterMemberId) {
		return rosterMemberPersistence.fetchByPrimaryKey(rosterMemberId);
	}

	/**
	 * Returns the roster member with the primary key.
	 *
	 * @param rosterMemberId the primary key of the roster member
	 * @return the roster member
	 * @throws PortalException if a roster member with the primary key could not be found
	 */
	@Override
	public RosterMember getRosterMember(long rosterMemberId)
		throws PortalException {
		return rosterMemberPersistence.findByPrimaryKey(rosterMemberId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(com.liferay.roster.service.RosterMemberLocalServiceUtil.getService());
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(RosterMember.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("rosterMemberId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(com.liferay.roster.service.RosterMemberLocalServiceUtil.getService());
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(RosterMember.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"rosterMemberId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(com.liferay.roster.service.RosterMemberLocalServiceUtil.getService());
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(RosterMember.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("rosterMemberId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return rosterMemberLocalService.deleteRosterMember((RosterMember)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return rosterMemberPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the roster members.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.roster.model.impl.RosterMemberModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of roster members
	 * @param end the upper bound of the range of roster members (not inclusive)
	 * @return the range of roster members
	 */
	@Override
	public List<RosterMember> getRosterMembers(int start, int end) {
		return rosterMemberPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of roster members.
	 *
	 * @return the number of roster members
	 */
	@Override
	public int getRosterMembersCount() {
		return rosterMemberPersistence.countAll();
	}

	/**
	 * Updates the roster member in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param rosterMember the roster member
	 * @return the roster member that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public RosterMember updateRosterMember(RosterMember rosterMember) {
		return rosterMemberPersistence.update(rosterMember);
	}

	/**
	 * Returns the club local service.
	 *
	 * @return the club local service
	 */
	public com.liferay.roster.service.ClubLocalService getClubLocalService() {
		return clubLocalService;
	}

	/**
	 * Sets the club local service.
	 *
	 * @param clubLocalService the club local service
	 */
	public void setClubLocalService(
		com.liferay.roster.service.ClubLocalService clubLocalService) {
		this.clubLocalService = clubLocalService;
	}

	/**
	 * Returns the club persistence.
	 *
	 * @return the club persistence
	 */
	public ClubPersistence getClubPersistence() {
		return clubPersistence;
	}

	/**
	 * Sets the club persistence.
	 *
	 * @param clubPersistence the club persistence
	 */
	public void setClubPersistence(ClubPersistence clubPersistence) {
		this.clubPersistence = clubPersistence;
	}

	/**
	 * Returns the roster local service.
	 *
	 * @return the roster local service
	 */
	public com.liferay.roster.service.RosterLocalService getRosterLocalService() {
		return rosterLocalService;
	}

	/**
	 * Sets the roster local service.
	 *
	 * @param rosterLocalService the roster local service
	 */
	public void setRosterLocalService(
		com.liferay.roster.service.RosterLocalService rosterLocalService) {
		this.rosterLocalService = rosterLocalService;
	}

	/**
	 * Returns the roster persistence.
	 *
	 * @return the roster persistence
	 */
	public RosterPersistence getRosterPersistence() {
		return rosterPersistence;
	}

	/**
	 * Sets the roster persistence.
	 *
	 * @param rosterPersistence the roster persistence
	 */
	public void setRosterPersistence(RosterPersistence rosterPersistence) {
		this.rosterPersistence = rosterPersistence;
	}

	/**
	 * Returns the roster member local service.
	 *
	 * @return the roster member local service
	 */
	public RosterMemberLocalService getRosterMemberLocalService() {
		return rosterMemberLocalService;
	}

	/**
	 * Sets the roster member local service.
	 *
	 * @param rosterMemberLocalService the roster member local service
	 */
	public void setRosterMemberLocalService(
		RosterMemberLocalService rosterMemberLocalService) {
		this.rosterMemberLocalService = rosterMemberLocalService;
	}

	/**
	 * Returns the roster member persistence.
	 *
	 * @return the roster member persistence
	 */
	public RosterMemberPersistence getRosterMemberPersistence() {
		return rosterMemberPersistence;
	}

	/**
	 * Sets the roster member persistence.
	 *
	 * @param rosterMemberPersistence the roster member persistence
	 */
	public void setRosterMemberPersistence(
		RosterMemberPersistence rosterMemberPersistence) {
		this.rosterMemberPersistence = rosterMemberPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the contact local service.
	 *
	 * @return the contact local service
	 */
	public com.liferay.portal.kernel.service.ContactLocalService getContactLocalService() {
		return contactLocalService;
	}

	/**
	 * Sets the contact local service.
	 *
	 * @param contactLocalService the contact local service
	 */
	public void setContactLocalService(
		com.liferay.portal.kernel.service.ContactLocalService contactLocalService) {
		this.contactLocalService = contactLocalService;
	}

	/**
	 * Returns the contact persistence.
	 *
	 * @return the contact persistence
	 */
	public ContactPersistence getContactPersistence() {
		return contactPersistence;
	}

	/**
	 * Sets the contact persistence.
	 *
	 * @param contactPersistence the contact persistence
	 */
	public void setContactPersistence(ContactPersistence contactPersistence) {
		this.contactPersistence = contactPersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.roster.model.RosterMember",
			rosterMemberLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.roster.model.RosterMember");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return RosterMemberLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return RosterMember.class;
	}

	protected String getModelClassName() {
		return RosterMember.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = rosterMemberPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.roster.service.ClubLocalService.class)
	protected com.liferay.roster.service.ClubLocalService clubLocalService;
	@BeanReference(type = ClubPersistence.class)
	protected ClubPersistence clubPersistence;
	@BeanReference(type = com.liferay.roster.service.RosterLocalService.class)
	protected com.liferay.roster.service.RosterLocalService rosterLocalService;
	@BeanReference(type = RosterPersistence.class)
	protected RosterPersistence rosterPersistence;
	@BeanReference(type = com.liferay.roster.service.RosterMemberLocalService.class)
	protected RosterMemberLocalService rosterMemberLocalService;
	@BeanReference(type = RosterMemberPersistence.class)
	protected RosterMemberPersistence rosterMemberPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ContactLocalService.class)
	protected com.liferay.portal.kernel.service.ContactLocalService contactLocalService;
	@ServiceReference(type = ContactPersistence.class)
	protected ContactPersistence contactPersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}